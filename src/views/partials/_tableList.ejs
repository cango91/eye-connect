<div class="table-responsive">
  <table id="<%= id %>-data-table" class="table <%= typeof captionTop!=='undefined' && captionTop ? 'caption-top' : '' %>">
    <caption><%= typeof caption !== 'undefined' ? caption : '' %></caption>
    <thead>
      <tr>
        <% if(typeof head !== 'undefined' && head.length){ 
                      head.forEach(item => {%>
        <th scope="col" data-sort-asc="<%= item?.sort?.asc?.href %>" data-sort-dsc="<%= item?.sort?.dsc?.href %>"><%= item?.text || item %>&nbsp;<%- item?.sort ? `<span class="table-sort ${item?.sort?.asc?.active ? 'active' : ''}">${item?.sort?.asc?.active ? '&uarr;' : `<a href="${item?.sort?.asc?.href}">&uarr;</a>` }</span>&nbsp;&verbar;&nbsp;<span class="table-sort ${item?.sort?.dsc?.active ? 'active' : ''}">${item?.sort?.dsc?.active ? '&darr;' : `<a href="${item?.sort?.dsc?.href}">&darr;</a>` }</span>` : '' %></th>
        <%}); } %>
      </tr>
    </thead>
    <tbody id="<%= id %>-data-body"></tbody>
  </table>
</div>
<script>
  window.addEventListener('load', () => {
    // Specify the data source URL
    const dataSourceUrl = '<%= dataUrl %>';

    const dataMethod = '<%= typeof dataMethod!== "undefined" ? dataMethod : "GET" %>';

    // Function to parse the data
    const parseData = <%- parseFunction %>;

    const headData = <%- JSON.stringify(head) %>

    // Function to handle the toggling of the active class and surrounding <a> tags
    const toggleActiveClass = (columnIndex, asc) => {
      const ths = document.querySelectorAll('#<%= id %>-data-table th');
      ths.forEach((th, idx) => {
        const sortSpans = th.querySelectorAll('.table-sort');
        const sortAsc = sortSpans[0];
        const sortDsc = sortSpans[1];
        if (idx !== columnIndex) {
          sortAsc.classList.remove('active');
          sortDsc.classList.remove('active');
          sortAsc.innerHTML = `<a href="${headData[idx]?.sort?.asc?.href}">${sortAsc.textContent}</a>`
          sortDsc.innerHTML = `<a href="${headData[idx]?.sort?.dsc?.href}">${sortDsc.textContent}</a>`
        } else {
          sortAsc.classList.toggle('active', asc);
          sortDsc.classList.toggle('active', !asc);
          sortAsc.innerHTML = asc ? sortAsc.textContent : `<a href="${headData[columnIndex]?.sort?.asc?.href}">${sortAsc.textContent}</a>`;
          sortDsc.innerHTML = asc ? `<a href="${headData[columnIndex]?.sort?.dsc?.href}">${sortDsc.textContent}</a>` : sortDsc.textContent;
        }
      });
    }
    // Fetch the data and populate the table
    const page = <%= page %>;
    const itemsPerPage = <%= itemsPerPage %>;
    const populateTable = (url, columnIndex = null, asc = null) => {
      fetch(`${url}?page=${page}&limit=${itemsPerPage}`, {
          method: dataMethod,
          headers: {
            "Content-Type": "application/json"
          }
        })
        .then(response => response.json())
        .then(data => {
          // Parse the data
          const parsedData = parseData(data);

          // Get the table body
          const tbody = document.getElementById('<%= id %>-data-body');

          // Clear any existing rows
          while (tbody.firstChild) {
            tbody.firstChild.remove();
          }

          // Add new rows
          parsedData.forEach(row => {
            const tr = document.createElement('tr');
            Object.values(row).forEach(value => {
              const td = document.createElement('td');
              td.textContent = value;
              tr.appendChild(td);
            });
            tbody.appendChild(tr);
          });

          if (columnIndex !== null) {
            // Toggle active class and surrounding <a> tags
            toggleActiveClass(columnIndex, asc);
          }
        });
    }


    // Initial population
    populateTable(dataSourceUrl);

    // Add event listeners to sort links
    const sortLinks = document.querySelectorAll('#<%= id %>-data-table .table-sort');
    sortLinks.forEach((link, index) => {
      link.addEventListener('click', e => {
        e.preventDefault();
        if(e.target.classList.contains('active')) return;
        const columnIndex = Math.floor(index / 2);
        const asc = index % 2 === 0;
        populateTable(e.target.getAttribute('href'), columnIndex, asc);
      });
    });


  });
</script>
<nav aria-label="Table pagination">
  <ul class="pagination">
    <li class="page-item <%= page === 1 ? 'disabled' : '' %>" id="<%= id %>-prev-page">
      <a class="page-link" href="<%= dataUrl %>?page=<%= page - 1 %>&limit=<%= itemsPerPage %>" aria-label="Previous">
        <span aria-hidden="true">&laquo;</span>
      </a>
    </li>
    <li class="page-item <%= page === totalPages ? 'disabled' : '' %>" id="<%= id %>-next-page" >
      <a class="page-link" href="<%= dataUrl %>?page=<%= page + 1 %>&limit=<%= itemsPerPage %>" aria-label="Next">
        <span aria-hidden="true">&raquo;</span>
      </a>
    </li>
  </ul>
</nav>