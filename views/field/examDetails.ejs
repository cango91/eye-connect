<%- include('../partials/header') %>
<%- include('../partials/navigation') %>
<main class="container-xl mt-5 py-4 bg-light shadow-lg rounded">
  <div class="modal fade" id="classificationModal" tabindex="-1" aria-labelledby="classificationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="classificationModalLabel">Automatic Image Classification Results</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <h5>Results:</h5>
          <p>
            <b>Result: </b><span id="result"></span><br>
            <b>Value: </b><small><span id="val"></span></small>
          </p>
          <p>Please note that this results are automatically generated and may not be accurate. Please consult with an ophthalmologist for a definitive diagnosis.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>
  <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteModalLabel">Are you sure you want to deletet this exam?</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          Confirming this action will permanently delete the exam.
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
        </div>
      </div>
    </div>
  </div>
  <div class="modal fade" id="confirmBackModal" tabindex="-1" aria-labelledby="confirmBackModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="confirmBackModalLabel">Changes will be lost</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          You have unsaved changes, navigating away from this page without saving them will loose these changes permanently. Are you sure you want to continue?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmBackBtn">Confirm</button>
        </div>
      </div>
    </div>
  </div>
  <div class="modal fade" id="imageViewModal" tabindex="-1" aria-labelledby="imageViewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">

          <div class="image-container overflow-auto">
            <img src="" alt="" class="img-fluid enlarged-image">
          </div>

          <div class="notes-container d-none">
            <textarea class="form-control" id="cons-notes-area" rows="3"></textarea>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script>
    const enlargeImage = (imageSrc, noteText = '', showNoteArea = false, noteAreaDisabled = true) => {
      const imageModal = document.getElementById('imageViewModal')
      const imModal = new bootstrap.Modal(imageModal);
      const noteArea = document.getElementById('cons-notes-area');

      imageModal.querySelector('.image-container img').src = imageSrc;

      if (showNoteArea) {
        imageModal.querySelector('.notes-container').classList.remove('d-none');
        noteArea.value = noteText;
      } else {
        imageModal.querySelector('.notes-container').classList.add('d-none');
      }
      if (noteAreaDisabled) {
        noteArea.disabled = true;
      } else {
        noteArea.disabled = false;
      }
      imModal.show();
    }
  </script>
  <div class="text-center">
    <h3><span class="float-start"><a id="confirm-back-btn" class="btn btn-secondary" href="/portal/exams?referrer=/portal/exams/<%- examId %>">&larr; Back</a></span>Exam Details<span class="float-end" id="icons-area"><a class="btn btn-success ms-1" id="save-btn"><%- saveIcon %></a><a class="btn btn-danger ms-1" id="delete-btn" data-bs-toggle="modal" data-bs-target="#deleteModal"><%- deleteIcon %></a></span><span class="float-end" id="specialist-icons-area"><a id="go-to-consultation-btn" class="btn btn-primary ms-1 d-none"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="i i-add-exam" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 5.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V10a.5.5 0 0 1-1 0V8.5H6a.5.5 0 0 1 0-1h1.5V6a.5.5 0 0 1 .5-.5z" />
            <path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z" />
            <path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z" />
          </svg></a></span></h3>
    <hr>
  </div>
  <div class="d-flex flex-column justify-content-center align-items-center" id="loading-div">
    <h2 class="text-info">Loading exam</h2>
    <div><strong>Please wait...</strong></div>
    <div class="spinner-border mt-2 text-warning" role="status">
    </div>
  </div>
  <div class="alert alert-danger d-none"></div>
  <div id="main-div">
    <div class="container-lg">
      <div class="alert" id="alert-div"></div>
      <div class="text-start">
        <h5><span id="examiner-name"></span></h5>
      </div>
      <div class="row">
        <div class="col-md-6 order-md-2 order-lg-1">
          <span class="text-muted">Notes</span>
          <h4 class="d-flex justify-content-between align-items-center mb-3">
          </h4>
          <textarea class="form-control" id="exam-notes" rows="15"></textarea>
        </div>
        <div class="col-md-6 order-md-1 order-lg-2">
          <h4 class="mb-3">Patient Info</h4>
          <ul class="list-group mb-3">
            <li class="list-group-item d-flex justify-content-between lh-condensed">
              <small>Name:</small>
              <span id="patient-name"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-condensed">
              <small>Sex:</small>
              <span id="patient-gender"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-condensed">
              <small>Age:</small>
              <span id="patient-age"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-condensed">
              <small>Date of Birth:</small>
              <span id="dob" class="badge text-dark"></span>
            </li>
          </ul>
          <div id="upload-area">
            <h4 class="mb-3">Image Upload</h4>
            <form>
              <div class="form-group">
                <ul class="list-group mb-3">
                  <li class="list-group-item d-flex justify-content-between">
                    <span id="existing-label"></span>
                    <span id="existing-count"></span>
                  </li>
                  <li class="list-group-item d-flex justify-content-between"><button class="input-group-text" id="choose-files">Choose Files</button><input type="file" id="examImageUpload" multiple><span id="session-images"></span><span class="btn btn-success ms-1 d-none" id="upload-all-btn"><%- uploadAllIcon %></span><span id="remove-all-btn" class="btn btn-danger ms-1 d-none"><%- removeAllIcon %></span></li>
                </ul>
              </div>
              <div class="drag-drop-area border p-3 mt-3">
                <h5>Drag & Drop Images Here</h5>
              </div>
            </form>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="d-flex flex-nowrap overflow-auto mt-3" id="image-container"></div>
      </div>
    </div>
  </div>
</main>
<script>
  const mainEl = document.getElementById('main-div');
  const loadingEl = document.getElementById('loading-div');
  const alertDiv = document.querySelector('.alert');
  const dropArea = document.querySelector('.drag-drop-area');
  const notesEl = document.getElementById('exam-notes'); // should have `disabled` in view mode.
  const dobEl = document.getElementById('dob');
  const ageEl = document.getElementById('patient-age');
  const genderEl = document.getElementById('patient-gender');
  const patientNameEl = document.getElementById('patient-name');
  const examinerNameEl = document.getElementById('examiner-name'); // displayed only in view mode.
  const uploadEl = document.getElementById('examImageUpload');
  const uploadArea = document.getElementById('upload-area');
  const saveBtn = document.getElementById('save-btn');
  const deleteBtn = document.getElementById('delete-btn');
  const iconsArea = document.getElementById('icons-area');
  const imageContainer = document.getElementById('image-container');
  const sessionImagesEl = document.getElementById('session-images');
  const existingCountEl = document.getElementById('existing-count');
  const existingLabelEl = document.getElementById('existing-label');
  const chooseFilesBtn = document.getElementById('choose-files');
  const uploadAllBtn = document.getElementById('upload-all-btn');
  const removeAllBtn = document.getElementById('remove-all-btn');
  const backBtn = document.getElementById('confirm-back-btn');
  const confirmBack = document.getElementById('confirmBackBtn');
  const consBtn = document.getElementById('go-to-consultation-btn');
  const classVal = document.getElementById('val');
  const classResult = document.getElementById('result');
  const resultModal = document.getElementById('classificationModal')
  const referrer = new URLSearchParams(window.location.search).get('referrer');
  confirmBack.href = `${referrer}?referrer=${window.location.pathname}`;

  const magnifySvg = `<%- magnifyIcon %>`;

  const imagesArray = [];

  const ICON_DIMS = [25, 25];

  const isSpecialist = <%- user.role === 'SpecialistHCP' %>


  let myExam;
  let notesCache;
  let examinerId;
  let patientId;
  let existingImages;
  let sessionImages;

  const showLoading = () => {
    mainEl.classList.add('d-none');
    loadingEl.classList.remove('d-none');
  }

  const hideLoading = () => {
    mainEl.classList.remove('d-none');
    loadingEl.classList.add('d-none');
  }

  const reportError = err => {
    alertDiv.classList.remove('d-none');
    loadingEl.classList.add('d-none');
    alertDiv.innerHTML = err;
  }

  const fetchImages = async imageIds => {
    const images = [];
    for (let id of imageIds) {
      const response = await fetch(`/portal/api/funduscopies/${id}`);
      const imageData = await response.json();
      if (!imageData.error) {
        images.push(imageData.data);
      } else {
        console.error('Error fetching image:', imageData.error);
        reportError(imageData.error);
      }
    }
    return images;
  }

  const backCheck = () => {

    if (myExam && (notesCache !== notesEl.value || sessionImages)) {
      const modal = new bootstrap.Modal(document.getElementById('confirmBackModal'));
      modal.show();
    } else {
      simulateClick(confirmBack);
    }
  }

  const saveNotes = async () => {
    const tempCache = notesEl.value;
    const params = new URLSearchParams();
    params.append('notes', tempCache.toString());
    try {
      const response = await fetch(`/portal/api/examinations/<%= examId %>?_method=put`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: params.toString()
      });
      if (!response.ok) {
        const errorMessage = await response.text();
        console.error(`Request failed with status ${response.status}: ${errorMessage}`);
        showAlert(`Notes update failed<br>Reason:${errorMessage}`, 'danger');
        return;
      }
      try {
        data = await response.json();
        if (!data.error) {
          showAlert('Notes Updated', 'success');
          notesCache = tempCache;
          saveEnabler({
            target: {
              value: tempCache
            }
          });
        } else {
          console.error(data);
          showAlert(`Notes update failed<br>Reason: ${data}`, 'danger');
        }
      } catch (error) {
        console.error(response);
        showAlert(`Notes update failed<br>Reason: ${await response.text()}`, 'danger');
      }
    } catch (err) {
      console.error(err);
      showAlert(`Notes update failed<br>Reason: ${err}`, 'danger');
    }
  }

  const disableEditing = () => {
    notesEl.disabled = true;
    uploadArea.classList.add('d-none');
    iconsArea.classList.add('d-none');
    notesEl.rows = 6;
  }

  const enableEditing = () => {
    notesEl.disabled = false;
    uploadArea.classList.remove('d-none');
    iconsArea.classList.remove('d-none');
    notesEl.rows = 15;
  }



  const handleExamData = async data => {
    if (data.notes) notesEl.textContent = data.notes;
    examinerId = data.examiner._id
    myExam = examinerId === '<%= user.id %>';
    if (myExam) {
      document.querySelector('.nav-link.active').innerText = 'Update Exam'
    }
    patientId = data.patient._id;
    patientName = data.patient.name;
    examinerNameEl.innerHTML = `<b>Examiner:</b> Dr. ${data.examiner.name}`;
    patientNameEl.textContent = data.patient.name;
    dobEl.textContent = getDate(data.patient.dateOfBirth);
    ageEl.textContent = calculateAge(data.patient.dateOfBirth);
    genderEl.textContent = data.patient.gender;

    if (!myExam) {
      disableEditing();
    } else {
      notesCache = data.notes ? data.notes : '';
      saveBtn.classList.add('disabled');
    }
    hideLoading();

    if (data.images && data.images.length) {
      const images = await fetchImages(data.images);
      //imagesArray.concat(images);
      displayImages(images);
    }
  }

  const fetchExamData = () => {
    fetch(`/portal/api/examinations/<%= examId %>`)
      .then(response => response.json())
      .then(data => {
        if (data.error) throw new Error(data.error);
        if (data.data.hasConsultation) {
          consBtn.href = `/portal/exams/<%= examId %>/consultation/?referrer=${window.location.pathname}`
          const consData = fetch('/portal/api/consultations?filter=examination&filterValue=_id<%= examId %>')
            .then(consResponse => consResponse.json())
            .then(consData => {
              if (consData.error) throw new Error(consData.error);
              if (consData.data[0].consultant._id === `<%- user.id %>`) {
                // show edit cons button
                consBtn.innerHTML = `<%- pencilIcon %>`;
                consBtn.classList.remove('d-none');
                consBtn.classList.add('btn-warning');
                consBtn.title = 'edit consultation'
              } else {
                // show view cons button
                consBtn.innerHTML = `<%- eyeIcon %>`;
                consBtn.classList.remove('d-none');
                consBtn.classList.add('btn-primary');
                consBtn.title = 'view consultation'
              }
            });

        } else if (isSpecialist) {
          consBtn.href = `/portal/exams/<%= examId %>/consultation/new?referrer=${window.location.pathname}`;
          consBtn.classList.remove('d-none');
          consBtn.classList.add('btn-primary');
          consBtn.title = 'begin new consultation'
        }
        handleExamData(data.data);
      })
      .catch(error => {
        reportError(error);

      });
  }


  const createAndStyleIcon = (dimensions, innerSvg, ...btnClasses) => {
    const span = document.createElement('span');
    span.className = btnClasses.join(' ');
    const icon = document.createElement('span');
    icon.innerHTML = innerSvg;
    const svg = icon.querySelector('svg');
    svg.style.width = dimensions[0];
    svg.style.width = dimensions[1];
    span.appendChild(icon);
    span.style.zIndex = 1;
    return span;
  }

  const bufferToB64 = (bufferArray, contentType) => {
    const uint8Array = new Uint8Array(bufferArray);
    const blob = new Blob([uint8Array], {
      type: contentType
    });
    const reader = new FileReader();

    return new Promise((resolve, reject) => {
      reader.onloadend = () => {
        resolve(reader.result);
      };

      reader.onerror = () => {
        reject(new Error('Error occurred while reading the buffer.'));
      };
      reader.readAsDataURL(blob);
    });
  }

  const displayImages = (images) => {
    for (let i = 0; i < images.length; i++) {
      let img = document.createElement('img');
      if (images[i].image && images[i].image.data && images[i].image.data.data && images[i].image.contentType) {
        bufferToB64(images[i].image.data.data, images[i].image.contentType).then((src) => {
          img.src = src;
        });
      } else {
        img.src = images[i].src;
      }

      const magnifyIcon = createAndStyleIcon(ICON_DIMS, `<%- magnifyIcon %>`, 'btn', 'border', 'border-dark', 'border-2', 'btn-warning', 'm-1');
      magnifyIcon.role = "enlarge preview";
      magnifyIcon.addEventListener('click', e => {
        enlargeImage(img.src);
      });

      const classificationResult = createAndStyleIcon(ICON_DIMS, `<%- resultIcon %>`, 'btn', 'border', 'border-dark', 'border-2', 'btn-info', 'm-1');
      classificationResult.role = "view automatic classification result"
      classificationResult.dataset.resultVal = images[i].classificationResult.value;
      classificationResult.dataset.resultStr = images[i].classificationResult.result;
      classificationResult.addEventListener('click', e => {
        const target = e.target.closest('span.btn');
        const value = target.dataset.resultVal;
        const string = target.dataset.resultStr;
        const modal = new bootstrap.Modal(resultModal);
        classVal.innerText = value;
        classResult.innerHTML = string
          .replace(/(POSITIVE)/gi, '<b><span class="text-danger">$1</span></b>')
          .replace(/(NEGATIVE)/gi, '<b><span class="text-success">$1</span></b>')
          .replace(/(very low)/gi, '<b><span class="text-danger">$1</span></b>')
          .replace(/(high)/gi, '<b><span class="text-success">$1</span></b>')
          .replace(/((?<!very\s)low)/gi, '<b><span class="text-warning">$1</span></b>');

        modal.show();
      });

      const thumbnailContainer = document.createElement('div');
      thumbnailContainer.className = 'position-relative d-flex';

      let container = document.createElement('div');
      container.className = 'position-absolute d-flex flex-column justify-content-start';
      container.appendChild(magnifyIcon);
      container.appendChild(classificationResult);

      thumbnailContainer.appendChild(img);
      thumbnailContainer.appendChild(container);
      imageContainer.appendChild(thumbnailContainer);
    }
  }

  const previewFile = (file) => {
    let reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onloadend = () => {
      let img = document.createElement('img');
      img.src = reader.result;
      img.className = 'img-thumbnail';
      const dims = ICON_DIMS;

      const thumbnailContainer = document.createElement('div');
      thumbnailContainer.className = 'position-relative d-flex';

      thumbnailContainer.dataset.imageContainer = true;

      const magnifyIcon = createAndStyleIcon(dims, `<%- magnifyIcon %>`, 'btn', 'border', 'border-dark', 'border-2', 'btn-warning', 'm-1');
      magnifyIcon.addEventListener('click', e => {
        enlargeImage(img.src);
      });

      const removeIcon = createAndStyleIcon(dims, `<%- deleteIcon %>`, 'btn', 'border', 'border-dark', 'border-2', 'btn-danger', 'm-1');
      removeIcon.addEventListener('click', e => {
        removePreview(removeIcon);
      });

      const uploadIcon = createAndStyleIcon(dims, `<%- uploadSingleIcon %>`, 'btn', 'border', 'border-dark', 'border-2', 'btn-success', 'm-1');
      uploadIcon.addEventListener('click', async () => await uploadFile(img));

      magnifyIcon.role = "enlarge preview";
      removeIcon.role = "remove image";
      removeIcon.ariaRoleDescription = 'remove a single image from upload list'
      uploadIcon.role = "upload image";
      uploadIcon.ariaRoleDescription = 'upload a single image'


      let container = document.createElement('div');
      container.className = 'position-absolute d-flex flex-column justify-content-start';
      container.appendChild(magnifyIcon);
      container.appendChild(uploadIcon);
      container.appendChild(removeIcon);

      thumbnailContainer.appendChild(img);
      thumbnailContainer.appendChild(container);
      imageContainer.prepend(thumbnailContainer);
    }
  }

  const uploadAllSession = () => {
    Array.from(document.querySelectorAll('[role="upload image"]')).forEach(btn => simulateClick(btn));
  }

  const removeAllSession = () => {
    Array.from(document.querySelectorAll('[role="remove image"]')).forEach(btn => simulateClick(btn));
  }

  const removePreview = (target) => {
    let parent;
    if (!target.dataset.imageContainer) {
      parent = target.parentNode;
      while (parent) {
        if (parent.dataset.imageContainer) {
          break;
        }
        parent = parent.parentNode;
      }
    } else {
      parent = target;
    }
    parent.remove();
    sessionImages--;
    updateSessionImages();
  }

  const uploadFile = async target => {
    const formData = new FormData();
    try {
      const fileAsDataUrl = target.src;
      // since we read the files as dataUrl and used this to populate preview img src's, we need to convert them to the proper format the backend expects.
      const base64data = fileAsDataUrl.split(',')[1];
      const decodedData = atob(base64data);
      const contentType = fileAsDataUrl.split(':')[1].split(';')[0];
      const arrayBuffer = decodedData.split('').reduce((acc, el, idx) => (acc[idx] = el.charCodeAt(0), acc), new Uint8Array(decodedData.length));
      const blob = new Blob([arrayBuffer], {
        type: contentType
      });
      formData.append('image', blob);
      formData.append('examId', `<%- examId %>`);

      // before we send our request let's add an indication this file is being uploaded
      const btns = target.parentNode.querySelectorAll('.btn');
      Array.from(btns).forEach(btn => btn.classList.add('disabled'));

      const spinner = document.createElement('div');
      spinner.className = 'spinner-border text-danger position-absolute';
      spinner.style.zIndex = 3;
      spinner.style.top = "50%";
      spinner.style.left = "50%";

      target.parentNode.appendChild(spinner);

      const response = await fetch('/portal/api/funduscopies', {
        method: 'POST',
        body: formData
      });
      if (response.ok) {
        data = await response.json();
        displayImages([{
          src: target.src,
          classificationResult: data.data.classificationResult
        }]);
        removePreview(target);
      } else {
        showAlert(`Couldn't upload image<br>${await response.text()}`, 'danger');
      }
    } catch (error) {
      console.error(error);
      showAlert(`Couldn't upload image<br>${error}`, 'danger');
    }
  }

  const deleteExam = async () => {
    const response = await fetch(`/portal/api/examinations/<%= examId %>?_method=delete`, {
      method: 'post'
    });
    if (response.status === 200) {
      window.location.href = '/portal/patients';
    } else {
      showAlert(`Couldn't delete exam`, 'danger');
    }
  }

  const handleFiles = files => {
    ([...files]).forEach(previewFile);
    updateSessionImages();
  };
  const preventDefaults = e => {
    e.preventDefault();
    e.stopPropagation();
  }
  const handleDrop = e => {
    sessionImages = sessionImages || 0;
    const dt = e.dataTransfer;
    const data = dt.items;
    const files = [];
    for (let i = 0; i < data.length; i++) {
      if (data[i].kind === 'file' && data[i].type.match("^image/")) {
        sessionImages++;
        files.push(data[i].getAsFile());
      }
    }
    handleFiles(files);
  }

  const highlight = e => {
    dropArea.classList.add('highlight');
  }

  const unhighlight = e => {
    dropArea.classList.remove('highlight');
  }

  const updateSessionImages = () => {
    sessionImages = sessionImages || 0;
    if (sessionImages) {
      [uploadAllBtn, removeAllBtn].forEach(e => e.classList.remove('d-none', 'disabled'));
      sessionImagesEl.innerText = `${sessionImages} images will be uploaded`;
    } else {
      [uploadAllBtn, removeAllBtn].forEach(e => e.classList.add('d-none'));
      sessionImagesEl.innerText = '';
    }
  };

  const updateExistingImages = async () => {
    // TODO fetch total image count (with image refs) for patient (when route exists)

  }

  dropArea.addEventListener('drop', handleDrop);

  ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, preventDefaults)
    document.body.addEventListener(eventName, preventDefaults)
  });



  ['dragenter', 'dragover'].forEach(eventName => {
    dropArea.addEventListener(eventName, highlight);

  });

  ['dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, unhighlight)
  });

  const saveEnabler = e => {
    if (myExam && e.target.value !== notesCache) {
      saveBtn.classList.remove('disabled');
    } else if (myExam && e.target.value === notesCache) {
      saveBtn.classList.add('disabled');
    }
  }

  const showAlert = (message, type) => {
    const alertDiv = document.getElementById('alert-div');
    alertDiv.innerHTML = '<div class="alert alert-' + type + ' alert-dismissible fade show" role="alert">' + message +
      '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>';
  }
  const simulateClick = target => {
    const evt = new MouseEvent('click', {
      view: window,
      bubbles: true,
      cancelable: true
    });
    return target.dispatchEvent(evt);
  }

  window.addEventListener('beforeunload', e => {
    if(myExam && (notesCache !== notesEl.value || sessionImages)){
      e.preventDefault();
      e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
    }
  });

  // ensure dom is loaded so all our references are available
  window.addEventListener('DOMContentLoaded', async (e) => {
    showLoading();
    await fetchExamData();
    notesEl.addEventListener('input', saveEnabler);
    saveBtn.addEventListener('click', saveNotes);
    document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
      await deleteExam();
    });
    confirmBack.addEventListener('click', (e) => {
      const params = new URLSearchParams(window.location.search);
      const referrer = params.get('referrer');
      window.location.href = referrer + `?referrer=${window.location.pathname}`;
    });
    chooseFilesBtn.addEventListener('click', e => {
      e.preventDefault();
      simulateClick(examImageUpload);
    });
    backBtn.addEventListener('click', e => {
      e.preventDefault();
      backCheck();
    });

    examImageUpload.addEventListener('change', (e) => {
      sessionImages = sessionImages || 0;
      const newImages = Array.from(e.target.files);
      sessionImages += newImages.length;
      handleFiles(newImages);
      e.target.value = null;
    });

    uploadAllBtn.addEventListener('click', e => {
      uploadAllSession();
      uploadAllBtn.classList.add('disabled');
      removeAllBtn.classList.add('disabled');
    });
    removeAllBtn.addEventListener('click', removeAllSession);


  });
</script>
<%- include('../partials/footer') %>