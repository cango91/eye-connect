<%- include('../partials/header') %>
<%- include('../partials/navigation') %>
<%- include('../partials/dismissableAlert') %>
<%- include('../partials/dynamicModal') %>
<%- include('../partials/makeButton') %>
<%- include('../partials/makeRowClickable') %>
<main class="container-lg mt-5 py-4 bg-light shadow-lg rounded">
  <div class="text-center">
    <h3><span class="float-start"><a id="history-back-btn" class="btn btn-secondary" href="/portal/patients">&larr; Back</a></span>Patient Details</h3>
    <hr>
  </div>
  <h2>
    <div class="row">
      <div class="col">
        <span id="placeholder"><small>loading...</small></span><span id="patient-name"></span>&nbsp;<span id="patient-gender"></span> <span id="patient-age"></span>
      </div>
      <div class="col">
        <span class="float-end mx-1"><a href="#" id="edit-btn" class="btn btn-warning"><%- pencilIcon %></a></span><span class="float-end"><a href="/portal/patients/<%= patientId %>/exams/new?referrer=/portal/patients/<%= patientId %>" class="btn btn-primary" id="new-exam-btn"><%- paperIcon %></a></span>
      </div>
    </div>
  </h2>
  <div class="container-lg">
    <div class="row g-3">
      <div class="col-sm-6">
        <h5 class="fw-bold">Date of Birth:</h5>
        <h5><span id="dob" class="badge text-dark"></span></h5>
      </div>

    </div>
    <div class="row">
      <div class="col">
        <h4>Previous Exams</h4>
        <div id="dy-table" class="border p-3">
          <div class="table-responsive" id="patientExams-table"></div>
        </div>
      </div>
    </div>
  </div>
</main>
<script>
  const confirmDeleteBtn = document.createElement('button');
  confirmDeleteBtn.className = 'btn btn-danger';
  confirmDeleteBtn.addEventListener('click', async e => {
    const url = e.target.dataset.deleteLink;
    try {
      response = await fetch(url, {
        method: 'post'
      });
      if (response.ok) {
        window.location.reload();
      } else {
        showAlert(`Couldn't delete exam: <br>${(await response.json()).error}`, 'danger');
      }
    } catch (error) {
      showAlert(error, 'danger');
    }
  });

  confirmDeleteBtn.innerText = 'Delete';
  const cancelBtn = document.createElement('button');
  cancelBtn.className = 'btn btn-secondary';
  cancelBtn.setAttribute('data-bs-dismiss', 'modal');
  cancelBtn.innerText = 'Cancel';

  const parseButtons = (data, td, row) => {
    makeRowClickable(row, `/portal/exams/${data.id}?referrer=${window.location.pathname}`, 'go to exam details', 'go to exam details');
    if (`<%- user.id %>` === data.examinerId) {
      const deleteBtn = makeButton(`<%- trashIcon %>`, ariaRole = 'delete exam', title = 'delete exam');
      deleteBtn.dataset.deleteLink = `/portal/api/examinations/${data.id}?_method=delete`;
      deleteBtn.dataset.examDate = data.date;
      deleteBtn.dataset.patientName = data.name;
      deleteBtn.className = 'btn btn-danger';
      deleteBtn.style.zIndex = 2;
      deleteBtn.addEventListener('click', e => {
        e.preventDefault();
        const target = e.target.closest('[data-delete-link]')
        confirmDeleteBtn.dataset.deleteLink = target.dataset.deleteLink;
        const title = `You're about to delete the exam dated ${target.dataset.examDate}`;
        const msg = `<p>You are about to permanently delete the exam of <strong>${target.dataset.patientName}</strong> dated <strong>${target.dataset.examDate}</strong>. This action is not reversible.</p><p>Are you sure you want to continue?</p>`;
        const confirmModal = makeModal([cancelBtn, confirmDeleteBtn], title, msg);
        confirmModal.show();
      });
      td.appendChild(deleteBtn);
    }
    row.appendChild(td);
    return new Promise(res => res());
  }
  const tableHeaders = [{
      text: 'Exam Date',
      sort: {
        sortBy: 'date'
      },
    },
    {
      text: 'Examiner',
      sort: {
        sortBy: 'examiner.name'
      },
    },
    {
      text: 'Exam Notes',
    },
    {
      text: 'Consultation?',
      sort: {
        sortBy: 'hasConsultation'
      },
    },
    {
      text: 'Image Count',
      sort: {
        sortBy: 'numImages'
      },
    },
    {
      text: '',
      parseFunction: parseButtons,
    }
  ];
  const tableClasses = ['table', 'table-striped', 'border', 'border-2', 'border-info'];
  const fetchPatientExams = async (opts, fUrl) => {
    maxNotesLength = 20;
    const response = await fetch(fUrl);
    const data = await response.json();
    const rows = [];
    data.data.forEach(item => {
      rows.push([getDate(item.date), item.examiner.name, item.notes && item.notes.length ? item.notes.substring(0, Math.min(maxNotesLength, item.notes.length)) + '...' : '<empty notes>', item.hasConsultation ? 'yes' : 'no', item.images ? item.images.length : 0, {
        id: item._id,
        name: item.patient.name,
        examinerId: item.examiner._id,
        date: getDate(item.date)
      }]);
    });
    opts.limit = data.limit ? data.limit : opts.limit;
    opts.pageCount = data.pageCount ? data.pageCount : opts.pageCount;
    opts.page = data.page ? data.page : opts.page;
    return rows;
  }
  const tableArea = document.getElementById('dy-table');
  const patientId = '<%= patientId  %>';
  const eyeIcon = '<%- eyeIcon %>';
  const pencilIcon = '<%- pencilIcon %>';
  const saveIcon = '<%- saveIcon %>';

  const editButton = document.getElementById('edit-btn');

  const nameElem = document.getElementById('patient-name');
  const genderElm = document.getElementById('patient-gender');
  const ageElm = document.getElementById('patient-age');
  const dobElem = document.getElementById('dob');

  const placeholder = document.getElementById('placeholder');

  let originalName, originalGender, originalDob;

  let isEditing = false;
  let patientData = null;

  const getPatientData = () => {
    fetch(`/portal/api/patients/${patientId}`)
      .then(response => response.json())
      .then(data => {
        patientData = data;
        placeholder.remove();
        nameElem.textContent = data.data.name;
        genderElm.textContent = `(${data.data.gender[0]}), `;
        ageElm.textContent = `${calculateAge(data.data.dateOfBirth)} years`;
        dobElem.textContent = getDate(data.data.dateOfBirth);
        tableArea.appendChild(placeholder);
        <% if(editMode){ %>
        toggleEditState();
        <% } %>
      });
  }


  const saveChanges = (e) => {
    if (e) e.preventDefault();
    const nameInput = nameElem.querySelector('input');
    const genderSelect = genderElm.querySelector('select');
    const dobInput = dobElem.querySelector('input');

    const params = new URLSearchParams();
    params.append('name', nameInput.value);
    params.append('gender', genderSelect.value);
    params.append('dateOfBirth', dobInput.value + 'T00:00');

    fetch(`/portal/api/patients/${patientId}?_method=put`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: params.toString()
      })
      .then(response => response.json())
      .then(data => {
        if (!data.error) {
          patientData = data;
          toggleEditState();
          ageElm.textContent = `${calculateAge(data.data.dateOfBirth)} years`;
        } else {
          console.error(data.error);
        }
      })
      .catch(error => {
        console.error(error);
      });
  }

  const toggleEditState = (e) => {
    if (e) e.preventDefault();
    if (!patientData) return;

    isEditing = !isEditing;
    if (isEditing) {
      nameElem.innerHTML = `<input type="text" value="${patientData.data.name}" class="form-control">`;
      genderElm.innerHTML = `<select class="form-select"><option value="Male"${patientData.data.gender === 'Male' ? ' selected' : ''}>Male</option><option value="Female"${patientData.data.gender === 'Female' ? ' selected' : ''}>Female</option></select>`;
      dobElem.innerHTML = `<input type="date" value="${new Date(patientData.data.dateOfBirth).toISOString().split('T')[0]}" class="form-control">`;
      ageElm.style.visibility = 'hidden';
      editButton.removeEventListener('click', toggleEditState);
      editButton.addEventListener('click', saveChanges);
      editButton.innerHTML = saveIcon;
      editButton.className = 'btn btn-success';
    } else {
      nameElem.textContent = patientData.data.name;
      genderElm.textContent = `(${patientData.data.gender[0]}), `;
      dobElem.textContent = getDate(patientData.data.dateOfBirth);
      ageElm.style.visibility = 'visible';
      editButton.removeEventListener('click', saveChanges);
      editButton.addEventListener('click', toggleEditState);
      editButton.innerHTML = pencilIcon;
      editButton.className = 'btn btn-warning';
    }
  }

  editButton.addEventListener('click', toggleEditState);
  window.addEventListener('load', getPatientData);
  window.addEventListener('DOMContentLoaded', e => {
    document.getElementById('history-back-btn').addEventListener('click', e => {
      e.preventDefault();
      window.history.back()
    });
    const handler = tableHandler(
      document.getElementById('patientExams-table'),
      'patientExams',
      null, {
        url: `/portal/api/patients/<%- patientId %>/examinations?`,
        page: 1,
        pageCount: 1,
        limit: 5,
        sort: {
          sortBy: 'date',
          asc: false,
        },
      },
      fetchPatientExams,
      tableHeaders,
      tableClasses
    );
    window.addEventListener('tableLoaded', e => {
      if (!handler.dataCount()) {
        placeholder.textContent = 'Patient has no previous exams';
      } else {
        placeholder.textContent = '';
      }
    });

  });
</script>
<%- include('../partials/footer') %>