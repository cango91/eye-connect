<%- include('../partials/header') %>
<%- include('../partials/navigation') %>
<%- include('../partials/makeButton') %>
<%- include('../partials/makeRowClickable') %>
<%- include('../partials/dismissableAlert') %>
<%- include('../partials/dynamicModal') %>
<main class="container-xxl mt-5 py-4 bg-light shadow-lg rounded">
  <div class="modal fade" id="genericModal" tabindex="-1" aria-labelledby="genericModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="genericModalLabel"></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
        </div>
        <div class="modal-footer">
          <!-- <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-danger" id="confirmDeleteBtn"></button> -->
        </div>
      </div>
    </div>
  </div>
  <div class="text-center mb-3">
    <h2>Specialist HCP - Home</h2>
  </div>
  <div class="container-xl">
    <div class="row">
      <script>
        const createThumbnailContainer = () => {
          thumbnailContainer = document.createElement('div');
          thumbnailContainer.className = 'position-relative d-flex';
          return thumbnailContainer;
        }

        const bufferToB64 = (bufferArray, contentType) => {
          const uint8Array = new Uint8Array(bufferArray);
          const blob = new Blob([uint8Array], {
            type: contentType
          });
          const reader = new FileReader();

          return new Promise((resolve, reject) => {
            reader.onloadend = () => {
              resolve(reader.result);
            };

            reader.onerror = () => {
              reject(new Error('Error while reading the buffer.'));
            };
            reader.readAsDataURL(blob);
          });
        }
      </script>
      <div class="col-md-7">
        <div class="table-responsive" id="awaitingCons-table"></div>
        <div id="toggleContainer" class="float-end">
          <span></span>
          <label class="form-switch">
            <input class="form-check-input" type="checkbox" id="toggleSwitch">
            <span class="switch-icon"></span>
          </label>
          <span> Don't show exams without images</span>
        </div>
        <div class="float-end"><a href="/portal/exams">Go to awaiting consultations</a></div>
      </div>
      <div class="col-md-5">
        <div class="table-responsive" id="recentCons-table"></div>
        <div class="float-end"><a href="/portal/consultations">Go to your consultations</a></div>
      </div>
    </div>
  </div>
</main>
<script>
  // Awaiting Consultations table data
  const tableClasses = ['table', 'table-striped', 'caption-top', 'border', 'border-2', 'border-info'];
  const fetchAwaitingCons = async (opts, fUrl) => {
    try {
      const response = await fetch(fUrl);
      const data = await response.json();
      const rows = [];
      data.data.forEach(item => {
        rows.push([item.images ? {
          image: item.images[0]
        } : {
          image: null
        }, getDate(item.date), item.patient.name, calculateAge(item.patient.dateOfBirth), item.images ? item.images.length : 0, {
          examId: item._id
        }]);
      });
      opts.limit = data.limit ? data.limit : opts.limit;
      opts.pageCount = data.pageCount ? data.pageCount : opts.pageCount;
      opts.page = data.page ? data.page : opts.page;
      return rows;
    } catch (e) {
      showAlert(`Couldn't fetch awaiting consultations<br>${e}`, 'danger');
    }
  }
  const parseAwaitingBtn = (data, td, row) => {
    makeRowClickable(row, `/portal/exams/${data.examId}?referrer=${window.location.pathname}`, 'go to exam details', 'go to exam details');
    const newCons = makeButton(`<%- paperIcon %>`, 'add a new consultation for this exam', 'add a new consultation for this exam', `/portal/exams/${data.examId}/consultation/new?referrer=${window.location.pathname}`);
    newCons.className = 'btn btn-primary';
    td.appendChild(newCons);
    row.appendChild(td);
    return new Promise(res => res());
  }

  const parseAwaitingImages = ({
    image
  }, td, _) => {
    new Promise((resolve, reject) => {
      if (!image) resolve();
      if (typeof(image) === 'undefined') {
        td.textContent = '<no images>';
        resolve();
        return;
      }
      const spinner = document.createElement('div');
      spinner.className = 'spinner-border text-warning';
      spinner.style.zIndex = 2;
      td.appendChild(spinner);

      fetch('/portal/api/funduscopies/' + image)
        .then(response => {
          td.removeChild(spinner);
          if (response.ok) {
            const container = createThumbnailContainer();
            response.json().then((data) => {
              const imageData = data.data.image;
              bufferToB64(imageData.data.data, imageData.contentType).then((decoded) => {
                const img = document.createElement('img');
                img.className = 'img-thumbnail';
                img.style.maxWidth = '150px'
                img.style.maxHeight = '75px'
                img.src = decoded;
                td.appendChild(img);
              });

            })
          } else {
            error = document.createElement('div');
            error.className = 'alert alert-danger';
            td.appendChild(error);
            reject();
          }
        }).catch(reject);
    });
  }

  const awaitingConsTableHeaders = [{
      text: '',
      parseFunction: parseAwaitingImages,
    },
    {
      text: 'Exam Date',
      sort: {
        sortBy: 'date'
      }
    },
    {
      text: 'Patient',
      sort: {
        sortBy: 'patient.name'
      },
    },
    {
      text: 'Age',
      sort: {
        sortBy: 'patient.dateOfBirth',
        reversed: true
      }
    },
    {
      text: '# Images',
      sort: {
        sortBy: 'numImages'
      }
    },
    {
      text: '',
      parseFunction: parseAwaitingBtn,
    }
  ];

  // Recent consultations table data

  const fetchRecentConsultations = async (opts, fUrl) => {
    try {
      const response = await fetch(fUrl);
      const data = await response.json();
      const rows = [];
      data.data.forEach(item => {
        rows.push([getDate(item.date), item.patient.name, item.retinopathyDiagnosis, {
          examId: item.examination,
          consId: item._id,
          date: getDate(item.date),
          name: item.patient.name
        }]);
      });
      opts.limit = data.limit ? data.limit : opts.limit;
      opts.pageCount = data.pageCount ? data.pageCount : opts.pageCount;
      opts.page = data.page ? data.page : opts.page;
      return rows;
    } catch (e) {
      showAlert(`Couldn't fetch recent consultations<br>${e}`, 'danger');
    }
  }

  const parseDiagnosis = (val, td) => new Promise((resolve, reject) => {
    if (!val) {
      td.textContent = "<no diagnosis>";
      resolve("<no diagnosis>");
    }
    switch (val) {
      case 'NoApparentDR':
        td.textContent = 'No DR';
        resolve('No DR');
        break;
      case 'MildNPDR':
        td.textContent = "Mild NPDR";
        resolve('Mild NDPR');
        break;
      case 'ModerateNPDR':
        td.textContent = "Moderate NDPR";
        resolve('Moderate NPDR');
        break;
      case 'SevereNPDR':
        td.textContent = "Severe NPDR";
        resolve("Severe NPDR");
        break;
      case 'PDR':
        td.textContent = "Proliferative DR";
        resolve("Proliferative DR");
        break;
      default:
        reject();
    }
  });

  const confirmDeleteBtn = document.createElement('button');
  confirmDeleteBtn.className = 'btn btn-danger';
  confirmDeleteBtn.addEventListener('click', async e => {
    const url = e.target.dataset.deleteLink;
    try {
      response = await fetch(url, {
        method: 'post'
      });
      if (response.ok) {
        window.location.reload();
      } else {
        showAlert(`Couldn't delete exam: <br>${(await response.json()).error}`, 'danger');
      }
    } catch (error) {
      showAlert(error, 'danger');
    }
  });
  confirmDeleteBtn.innerText = 'Delete';
  const cancelBtn = document.createElement('button');
  cancelBtn.className = 'btn btn-secondary';
  cancelBtn.setAttribute('data-bs-dismiss', 'modal');
  cancelBtn.innerText = 'Cancel';

  const parseRecentButtons = (data, td, row) => new Promise(resolve=>{
    makeRowClickable(row, `/portal/consultations/${data.consId}?referrer=${document.location.pathname}`, 'go to consultation details', 'go to consultation details');
    const deleteBtn = makeButton(`<%- trashIcon %>`, ariaRole = 'delete exam', title = 'delete exam');
    deleteBtn.dataset.deleteLink = `/portal/api/consultations/${data.consId}?_method=delete`;
    deleteBtn.dataset.examDate = data.date;
    deleteBtn.dataset.patientName = data.name;
    deleteBtn.className = 'btn btn-danger';
    deleteBtn.style.zIndex = 2;
    deleteBtn.addEventListener('click', e => {
      e.preventDefault();
      const target = e.target.closest('[data-delete-link]')
      confirmDeleteBtn.dataset.deleteLink = target.dataset.deleteLink;
      const title = `You're about to delete the consultation dated ${target.dataset.examDate}`;
      const msg = `<p>You are about to permanently delete the consultation of <strong>${target.dataset.patientName}</strong> dated <strong>${target.dataset.examDate}</strong>. This action is not reversible.</p><p>Are you sure you want to continue?</p>`;
      const confirmModal = makeModal([cancelBtn, confirmDeleteBtn], title, msg);
      confirmModal.show();
    });
    td.appendChild(deleteBtn);
    row.appendChild(td);
    resolve();
  });

  const recentConsTableHeaders = [{
      text: 'Cons. Date',
      sort: {
        sortBy: 'data'
      }
    },
    {
      text: 'Patient',
      sort: {
        sortBy: 'exam.patient.name'
      }
    },
    {
      text: 'DR diagnosis',
      sort: {
        sortBy: 'retinopathyDiagnosis'
      },
      parseFunction: parseDiagnosis,
    },
    {
      text: '',
      parseFunction: parseRecentButtons,
    }
  ];

  window.addEventListener('DOMContentLoaded', e => {
    const toggler = document.getElementById('toggleSwitch');
    const handler = tableHandler(
      document.getElementById('awaitingCons-table'),
      'awaitingCons',
      'Exams Awaiting Consultations', {
        url: `/portal/api/examinations?filter=hasConsultation&filterValue=false&hasImages=true`,
        page: 1,
        pageCount: 1,
        limit: 5,
        sort: {
          sortBy: 'date',
          asc: true,
        },
      },
      fetchAwaitingCons,
      awaitingConsTableHeaders,
      tableClasses
    );
    const cp = handler.table.querySelector('caption');
    toggler.checked = handler.getOpts().url.match(/(?<=\?hasImages=true)|(?<=&hasImages=true)/) ? true : false;
    cp.appendChild(toggleContainer);
    toggler.addEventListener('click', evt => {
      // do not prevent default, current .checked state is what we want to upload table data with
      handler.table.dataset.page = '1';

      // Remove existing ?filter= or &filter= and ?filterValue or &filterValue string from the URL
      let updatedUrl = handler.getOpts().url.replace(/(\?|&)(hasImages=true)/, '');
      if (toggler.checked) {
        // Add ?filterValue=myId&filter=examiner to the URL
        const separator = updatedUrl.includes('?') ? '&' : '?';
        updatedUrl += separator + 'hasImages=true'
      }
      handler.setOpts({
        url: updatedUrl,
        page: 1
      });
      handler.populateTable();
    });
    const recentHandle = tableHandler(
      document.getElementById('recentCons-table'),
      'recentCons',
      'My recent consultations', {
        url: `/portal/api/consultations?filter=consultant&filterValue=_id<%- user.id %>`,
        page: 1,
        pageCount: 1,
        limit: 5,
        sort: {
          sortBy: 'date',
          asc: true,
        }
      },
      fetchRecentConsultations,
      recentConsTableHeaders,
      tableClasses
    )
  });
</script>
<%- include('../partials/footer') %>