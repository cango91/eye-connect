<%- include('../partials/header') %>
<%- include('../partials/navigation') %>
<%- include('../partials/imageViewer') %>
<%- include('../partials/confirmDialog') %>
<main class="container-xl mt-5 py-4 bg-light shadow-lg rounded">
  <div class="text-center">
    <h3><span class="float-start"><a id="confirm-back-btn" class="btn btn-secondary" href="/portal/exams">&larr; All Exams</a></span>Consultation Details<span class="float-end" id="icons-area"><a class="btn btn-success ms-1" id="save-btn"><%- saveIcon %></a><a class="btn btn-danger ms-1" id="delete-btn"><%- deleteIcon %></a></span></h3>
    <hr>
  </div>
  <div class="d-flex flex-column justify-content-center align-items-center" id="loading-div">
    <h2 class="text-info">Loading consultation</h2>
    <div><strong>Please wait...</strong></div>
    <div class="spinner-border mt-2 text-warning" role="status">
    </div>
  </div>
  <div id="main-div">
    <div class="container-lg">
      <div class="alert alert-danger d-none"></div>
      <div class="alert" id="alert-div"></div>
      <div class="text-start">
        <h5>Dr. <span id="consulting-doctor-name"></span></h5>
      </div>
      <div class="row">
        <div class="col-md-6 order-md-2 order-lg-1">
          <span class="text-muted">Notes</span>
          <h4 class="d-flex justify-content-between align-items-center mb-3">
          </h4>
          <textarea class="form-control" id="cons-notes" rows="8" name="notes"></textarea>
          <span class="text-muted mt-3">Exam Notes by Dr. <span id="examiner-name"></span></span>
          <textarea class="form-control mt-2" disabled aria-disabled="true" id="exam-notes" rows="7"></textarea>
        </div>
        <div class="col-md-6 order-md-1 order-lg-2">
          <h4 class="mb-3">Patient Info</h4>
          <ul class="list-group mb-3">
            <li class="list-group-item d-flex justify-content-between lh-condensed">
              <small>Name:</small>
              <span id="patient-name"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-condensed">
              <small>Sex:</small>
              <span id="patient-gender"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-condensed">
              <small>Age:</small>
              <span id="patient-age"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-condensed">
              <small>Date of Birth:</small>
              <span id="dob" class="badge text-dark"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-condensed">
              <small>Diagnosis:</small>
              <select id="diagnosis" class="form-select-sm" name="retinopathyDiagnosis">
                <option value="" hidden disabled></option>
                <option value="NoApparentDR">No Apparent DR</option>
                <option value="MildNPDR">Mild NPDR</option>
                <option value="ModerateNPDR">Moderate NPDR</option>
                <option value="SevereNPDR">Severe NPDR</option>
                <option value="PDR">PDR</option>
              </select>
            </li>
          </ul>
          <div id="display-area">
            <h4 class="mb-3">Examination Images</h4>
            <div id="image-container" class="d-flex flex-nowrap overflow-auto"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>
<script>
  const mainEl = document.getElementById('main-div');
  const loadingEl = document.getElementById('loading-div');
  const alertDiv = document.querySelector('.alert.alert-danger.d-none');
  const dobEl = document.getElementById('dob');
  const ageEl = document.getElementById('patient-age');
  const genderEl = document.getElementById('patient-gender');
  const patientNameEl = document.getElementById('patient-name');
  const examinerNameEl = document.getElementById('examiner-name');
  const consultantNameEl = document.getElementById('consulting-doctor-name');
  const examNotesEl = document.getElementById('exam-notes');
  const consNotesEl = document.getElementById('cons-notes');
  const iconsArea = document.getElementById('icons-area');
  const imageContainer = document.getElementById('image-container');
  const saveBtn = document.getElementById('save-btn');
  const diagEl = document.getElementById('diagnosis');

  let imagesArray = [],
    patientData = {},
    examNotes, examinerData = {},
    consultantData = {},
    notesCache, diagnosis,consId;

  const ICON_DIMS = [25, 25];

  const showLoading = () => {
    mainEl.classList.add('d-none');
    loadingEl.classList.remove('d-none');
  }

  const hideLoading = () => {
    mainEl.classList.remove('d-none');
    loadingEl.classList.add('d-none');
  }

  const reportError = err => {
    alertDiv.classList.remove('d-none');
    alertDiv.innerHTML = `Could not create exam<br>Reason: ${err}`;
  }

  const fetchImages = async imageIds => {
    const images = [];
    for (let id of imageIds) {
      const response = await fetch(`/portal/api/funduscopies/${id}`);
      const imageData = await response.json();
      if (!imageData.error) {
        images.push(imageData.data);
      } else {
        console.error('Error fetching image:', imageData.error);
        reportError(imageData.error);
      }
    }
    return images;
  }

  const setViewMode = () => {
    consNotesEl.disabled = true;
    diagEl.disabled = true;
    iconsArea.classList.add('d-none');
  }

  const setEditMode = () => {
    consNotesEl.disabled = false;
    diagEl.disabled = false;
    iconsArea.classList.remove('d-none');
  }

  const updateDOM = () => {
    dobEl.innerText = getDate(patientData.dateOfBirth);
    ageEl.innerText = calculateAge(patientData.dateOfBirth);
    genderEl.innerText = patientData.gender;
    patientNameEl.innerText = patientData.name;
    examinerNameEl.innerText = examinerData.name;
    consultantNameEl.innerText = consultantData.name;
    examNotesEl.value = examNotes;
    consNotesEl.value = consNotes;
    diagEl.childNodes.forEach(node => node.selected = node.value === diagnosis);
    saveEnabler({
      target: consNotesEl
    });
  }
  const showAlert = (message, type) => {
    const alertDiv = document.getElementById('alert-div');
    alertDiv.innerHTML = '<div class="alert alert-' + type + ' alert-dismissible fade show" role="alert">' + message +
      '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>';
  }

  const saveConsultation = async () => {
    try {
        const params = new URLSearchParams();
        params.append('notes',consNotesEl.value);
        params.append('retinopathyDiagnosis',diagEl.value);
        const response = await fetch(`/portal/api/consultations/${consId}?_method=put`,{
            method:'post',
            headers:{'Content-Type': 'application/x-www-form-urlencoded'},
            body: params.toString(),
        });
        if(!response.ok){
            throw new Error(await response.text());
        }
        data = await response.json();
        notesCache = data.data.notes;
        diagnosis = data.data.retinopathyDiagnosis;
        showAlert('Update Successful','success');
        saveEnabler({target: consNotesEl});
    } catch (error) {
        console.error(error);
        reportError(`Couldn't save consultation<br>${error}`);
    }
  }

  const deleteConsultation = async () => {

  }

  const showDeleteConfirmation = () => {

  }

  const showUnsavedChangesConfirmation = () => {

  }

  const fetchData = async () => {
    try {
      const response = await fetch('/portal/api/consultations/?filter=examination&filterValue=_id<%- examId %>');
      if (response.ok) {
        const data = await response.json();
        if (data.error) throw new Error(data.error);
        if (data.data[0].consultant._id === `<%= user.id %>`) {
          setEditMode();
        } else {
          setViewMode();
        }
        consultantData = data.data[0].consultant;
        examinerData = data.data[0].examiner;
        patientData = data.data[0].patient;
        imagesArray = data.data[0].images;
        examNotes = data.data[0].exam.notes;
        consNotes = data.data[0].notes;
        diagnosis = data.data[0].retinopathyDiagnosis || '';
        consId = data.data[0]._id;
        notesCache = consNotes;
        updateDOM();
        hideLoading();
        if (imagesArray.length) {
          const images = await fetchImages(imagesArray);
          displayImages(images);
        }
      }
    } catch (error) {
      reportError(`Problem fetching exam and cons data<br>${error}`);
    }
  }

  const updateLocalNotes = notes => {
    consNotesEl.value = notes;
    saveEnabler({
      target: consNotesEl
    });
  }

  const saveEnabler = e => {
    const validDiagnosis = ['NoApparentDR', 'MildNPDR', 'ModerateNPDR', 'SevereNPDR', 'PDR'].includes(diagEl.value);
    if(!validDiagnosis || !consNotesEl.value){
        saveBtn.classList.add('disabled');
        return;
    }
    if (`<%- user.id %>` === consultantData._id && (e.target.value !== notesCache || diagEl.value !== diagnosis)) {
      saveBtn.classList.remove('disabled');
    } else if (`<%- user.id %>` === consultantData._id && (e.target.value === notesCache && diagEl.value === diagnosis)) {
      saveBtn.classList.add('disabled');
    }
  }
  // IMAGE STUFF

  const createAndStyleIcon = (dimensions, innerSvg, ...btnClasses) => {
    const span = document.createElement('span');
    span.className = btnClasses.join(' ');
    const icon = document.createElement('span');
    icon.innerHTML = innerSvg;
    const svg = icon.querySelector('svg');
    svg.style.width = dimensions[0];
    svg.style.width = dimensions[1];
    span.appendChild(icon);
    span.style.zIndex = 1;
    return span;
  }

  const bufferToB64 = (bufferArray, contentType) => {
    const uint8Array = new Uint8Array(bufferArray);
    const blob = new Blob([uint8Array], {
      type: contentType
    });
    const reader = new FileReader();

    return new Promise((resolve, reject) => {
      reader.onloadend = () => {
        resolve(reader.result);
      };

      reader.onerror = () => {
        reject(new Error('Error occurred while reading the buffer.'));
      };

      reader.readAsDataURL(blob);
    });
  }

  const displayImages = (images) => {
    for (let i = 0; i < images.length; i++) {
      let img = document.createElement('img');
      if (images[i].image && images[i].image.data && images[i].image.data.data && images[i].image.contentType) {
        bufferToB64(images[i].image.data.data, images[i].image.contentType).then((src) => {
          img.src = src;
        });
      } else {
        img.src = images[i];
      }
      img.className = 'img-thumbnail';

      const magnifyIcon = createAndStyleIcon(ICON_DIMS, `<%- magnifyIcon %>`, 'btn', 'border', 'border-dark', 'border-2', 'btn-warning', 'm-1');
      magnifyIcon.role = "enlarge preview";
      magnifyIcon.addEventListener('click', e => {
        enlargeImage(img.src, noteText = consNotesEl.value, showNoteArea = true, noteAreaDisabled = `<%- user.id %>` !== consultantData._id, updateLocalNotes);
      });
      const thumbnailContainer = document.createElement('div');
      thumbnailContainer.className = 'position-relative d-flex';

      let container = document.createElement('div');
      container.className = 'position-absolute d-flex flex-column justify-content-start';
      container.appendChild(magnifyIcon);

      thumbnailContainer.appendChild(img);
      thumbnailContainer.appendChild(container);
      imageContainer.appendChild(thumbnailContainer);
    }
  }


  window.addEventListener('DOMContentLoaded', async e => {

    consNotesEl.addEventListener('input', saveEnabler);
    diagEl.addEventListener('change', saveEnabler);
    saveBtn.addEventListener('click',saveConsultation);

    showLoading();
    await fetchData();
  })
</script>
<%- include('../partials/footer') %>